generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl =  env("DIRECT_URL")
}

model Users {
  user_id       Int         @id @default(autoincrement())
  username      String      @db.VarChar(50)
  password      String?     @db.VarChar(255)
  email         String      @unique @db.VarChar(50)
  role          Role        @default(USER)
  created_on    DateTime    @default(now())
  last_login    DateTime?   @default(now())
  refresh_token String?     @db.VarChar(255)
  peminjam      Peminjam[]
  keranjang     Keranjang[]

  //prasat Prasat[]

  preOrderPrasat PreOrderPrasat[]

  Approval Approval[]
}

model Peminjam {
  id_peminjam         Int                @id @default(autoincrement())
  nama_matakuliah     String             @db.VarChar(50)
  prasat              String             @db.VarChar(50)
  jam_praktek         String             @db.VarChar(10)
  tanggal_praktek     String?            @db.VarChar(20)
  tanggal_order       DateTime           @default(now())
  tanggal_kembali_alat  String?
  ruangan_lab           String?
  userId              Int
  users               Users              @relation(fields: [userId], references: [user_id])
  type                Type               @default(PENDING)
  transaksiBarang     TransaksiBarang[]
  barangHabisPakai    BarangHabisPakai[]
  // barangPinjam        BarangPinjam[]

  @@map("peminjam")
}

model History {
  id_history   String @id @default(uuid())
  barangId     Int
  matakuliahId Int
  nama_barang  String @db.VarChar(50)
  jumlah       Int

  // matkuls Matakuliah @relation(fields: [matakuliahId], references: [id_matakuliah])
  barangs Barang     @relation(fields: [barangId], references: [id_barang])
}

model Barang {
  id_barang        Int                @id @default(autoincrement())
  nama_barang      String             @db.VarChar(50)
  total_stock      Int
  jenis_barang     String             @db.VarChar(50)
  harga_barang     Int
  gambar_barang    String?
  kode_barang      String             @unique
  keranjangs       Keranjang[]
  transaksiBarang  TransaksiBarang[]
  history          History[]
  barangHabisPakai BarangHabisPakai[]
  // barangPinjam     BarangPinjam[]

  @@map("barangs")
  BarangDalamPrasat BarangDalamPrasat[]
  StokOpname StokOpname[]
}

model Keranjang {
  id_keranjang  Int      @id @default(autoincrement())
  barangId      Int
  barangs       Barang   @relation(fields: [barangId], references: [id_barang])
  jumlah_barang Int?
  isCheckedOut  String?  @default("N")
  delete_at     DateTime @default(now())
  userId        Int
  users         Users    @relation(fields: [userId], references: [user_id])

  @@map("keranjangs")
}

model BarangHabisPakai {
  id_barang_habis_pakai Int       @id @default(autoincrement())
  peminjam              Peminjam? @relation(fields: [peminjamId], references: [id_peminjam], onDelete: Cascade)
  peminjamId            Int?
  barangs               Barang    @relation(fields: [barangId], references: [id_barang])
  barangId              Int
  jumlah_barang         Int
  nama_barang           String
  kode_barang           String
  jenis_barang          String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model TransaksiBarang {
  id_transaksi_barang Int       @id @default(autoincrement())
  harga_barang        Int?
  jumlah_barang       Int?
  barangId            Int
  type                Type      @default(PENDING)
  peminjamId          Int?
  barangs             Barang    @relation(fields: [barangId], references: [id_barang])
  peminjam            Peminjam? @relation(fields: [peminjamId], references: [id_peminjam], onDelete: Cascade)
  tanggal_keluar      String?
  tanggal_masuk       String?
  tanggal_pinjam      String?
  nama_matakuliah     String?
  nama_barang         String?
  kode_barang         String?
  keterangan          String?

  @@map("transaksiBarang")
}

model Prasat {
  id_prasat      Int               @id @default(autoincrement())
  nama_prasat    String            @db.VarChar(100)
  deskripsi     String?           @db.VarChar(255)
  created_by    Int
  //createdBy     Users             @relation(fields: [created_by], references: [user_id]) // Relasi ke Users
  barangDalamPrasat BarangDalamPrasat[] // Barang yang terdapat dalam paket

  @@map("prasat")
  preOrderPrasat PreOrderPrasat[]
}

model BarangDalamPrasat {
  id_barang_dalam_paket Int      @id @default(autoincrement())
  prasatId               Int
  barangId              Int
  prasat                Prasat    @relation(fields: [prasatId], references: [id_prasat]) // Relasi ke Paket
  barang                Barang   @relation(fields: [barangId], references: [id_barang]) // Relasi ke Barang
  jumlah_barang         Int      // Jumlah barang dalam paket

  @@map("barangDalamPrasat")
}

model PreOrderPrasat {
  id_pre_order_paket Int       @id @default(autoincrement())
  userId             Int
  prasatId            Int
  tanggal_order      DateTime  @default(now()) // Tanggal pemesanan
  status             Status    @default(PENDING) // Status menggunakan enum
  users              Users     @relation(fields: [userId], references: [user_id]) // Relasi ke Users
  prasat              Prasat    @relation(fields: [prasatId], references: [id_prasat]) // Relasi ke Paket
  tanggal_disetujui  DateTime? // Tanggal disetujui
  approvalId         Int?
  approvals          Approval? @relation(fields: [approvalId], references: [id_approval]) // Relasi ke Approval

  @@map("preOrderPrasat")
}

model Approval {
  id_approval    Int      @id @default(autoincrement())
  userId         Int
  users          Users    @relation(fields: [userId], references: [user_id]) // Relasi ke Users
  tanggal_approve DateTime @default(now()) // Tanggal approval
  remarks        String?  @db.VarChar(255) // Catatan tambahan

  @@map("approvals")
  preOrderPrasat PreOrderPrasat[]
}

model StokOpname {
  id_stok_opname Int       @id @default(autoincrement())
  barangId       Int
  barangs        Barang    @relation(fields: [barangId], references: [id_barang]) // Relasi ke Barang
  jumlah_tersisa Int       // Stok barang tersisa
  tanggal_opname DateTime  @default(now()) // Tanggal stok opname

  @@map("stokOpname")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  USER
  KAPRODI
  DEKAN
  WAREK1
  WAREK2
}

enum Type {
  BarangKeluar
  BarangMasuk
  BarangPinjam
  PENDING
  CANCEL
}

